

/*NAME: Aaishwarya Darandale

ROLL NO: 71
Problem statement :C17
Problem Statement : The symbol table is generated by compiler.  From this perspective, the symbol table is a set of name-attribute pairs.  In a symbol table for a compiler, the name is an identifier, and the attributes might include an initial value and a list of lines that use the identifier. Perform the following operations on symbol table: 
(1)   Determine if a particular name is in the table 
(2)   Retrieve the attributes of that name 
(3)   Modify the attributes of that name 
(4)   Insert a new name and its attributes 
(5)   Delete a name and its attributes*/



#include<iostream>
#include<string.h>
using namespace std;

struct node
{
	char symbol[20];
	char type[20];
	int size;
	int line;
	node *left;
	node *right;
};

class symbol
{
	public:
	node *root;
	symbol()
	{
		root=NULL;
	}
	void create()
	{
		node *temp;
		char ch;
		do
		{
			temp=new node;
			cout<<"\nEnter the Symbol:";
			cin>>temp->symbol;
			cout<<"\nEnter the Data type:";
			cin>>temp->type;
			cout<<"\nEnter the size:";
			cin>>temp->size;
			cout<<"\nEnter the line number:";
			cin>>temp->line;
			temp->right=NULL;
			temp->left=NULL;
			if(root==NULL)
				root=temp;
			else
				insert(root,temp);
			cout<<"\nDo you want to insert more symbols(y/n):";
			cin>>ch;
		}while(ch=='y'||ch=='Y');
	}
	void insert(node *r,node *t)
	{
		if(strcmp(t->symbol,r->symbol)<0)
		{
			if(r->left==NULL)
				r->left=t;
			else
				insert(r->left,t);
		}
		else
		{
			if(r->right==NULL)
				r->right=t;
			else
				insert(r->right,t);
		}
	}
	void display(node *r)
	{
		if(r!=NULL)
		{
			display(r->left);
			cout<<r->symbol<<"\t\t"<<r->type<<"\t\t"<<r->size<<"\t\t"<<r->line<<"\n";
			display(r->right);
		}
	}

       void search(node *r,char d[])
	{
		int flag=0;
		int cnt=-1;
		while(r!=NULL)
		{	cnt++;
			if(strcmp(d,r->symbol)==0)
			{
				cout<<"\nDatatype\tSize\t\tLineno\n";
				cout<<r->type<<"\t\t"<<r->size<<"\t\t"<<r->line<<"\n";
				flag=1;
				cout<<"\nComparisions required:"<<cnt;
				break;
			}
			if(strcmp(d,r->symbol)<0)
				r=r->left;

			if(strcmp(d,r->symbol)>0)
				r=r->right;
		}
		if(flag==0)
			cout<<"symbol not found:";

	}
	void update(node *r,char d[])
	{	int flag=0;
		while(r!=NULL)
		{
			if(strcmp (d,r->symbol) == 0)
			{
				cout<<"\nEnter the data type:";
				cin>>r->type;
				cout<<"\nEnter the size:";
				cin>>r->size;
				cout<<"\nEnter the line number:";
				cin>>r->line;
				cout<<"\n*@*Word updated succesfully*@*";
				flag=1;
				break;
			}
			if(strcmp(d,r->symbol)<0)
				r=r->left;
			if(strcmp(d,r->symbol)>0)
				r=r->right;
		}
		if(flag==0)
		{
			cout<<"\nsymbol not found:";
		}
	}


};

int main()
{
	char ch,word[20];
	int ch1;
	symbol s;
	node *newn;

	do
	{
		cout<<"\n\n****MENU LIST****\n\n1.Create\n2.Display\n3.Search\n4.Insert\n5.Update\nEnter your choice:";
		cin>>ch1;
		switch(ch1)
		{
			case 1:
				s.create();
				break;
			case 2:
				if(s.root!=NULL)
				{
					cout<<"\nSymbol\t\tDatatype\tSize\t\tLineno\n";
					s.display(s.root);
				}
				else
					cout<<"\nThere is no data to display";
				break;
			case 3:if(s.root==NULL)
					cout<<"\nNo symbol to search:";
				else
				{
					cout<<"\nEnter the symbol to search:";
					cin>>word;
					s.search(s.root,word);
				}
				break;
			case 4:if(s.root!=NULL)
				{
					newn=new node;
					cout<<"\nEnter symbol to insert :";
					cin>>newn->symbol;
					cout<<"\nEnter it's Datatype :";
					cin>>newn->type;
					cout<<"\nEnter it's size:";
					cin>>newn->size;
					cout<<"\nEnter the line number:";
					cin>>newn->line;
					newn->right=NULL;
					newn->left=NULL;
					s.insert(s.root,newn);
					cout<<"\n*@*Symbol inserted Sucessfully:";
				}
				else
					cout<<"\nCreate the symbol table";
				break;
		case 5:
				if(s.root==NULL)
					cout<<"\nNo symbol to update:";
				else
				{
					cout<<"\nEnter the symbol to update";
					cin>>word;
					s.update(s.root,word);
				}
				break;
		default:
				cout<<"\nWrong choice entered:";
		}
		cout<<"\nDo you want to continue more operation(y/n):";
		cin>>ch;
	}while(ch=='y'||ch=='Y');
	return 0;
}


